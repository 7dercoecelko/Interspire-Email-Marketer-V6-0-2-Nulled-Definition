.Grid {
	display: flex;
	flex-flow: row wrap;

	// because items have gutters on both sides
	margin-left: -0.5rem;
	margin-right: -0.5rem;
	@media (min-width: $layout-m) {
		margin-left: -0.75rem;
		margin-right: -0.75rem;
	}
}
.Grid-item {
	flex: 0 1 50%;
	padding-left: 0.5rem;
	padding-right: 0.5rem;
	margin-bottom: 1em;

	// bigger version
	@media (min-width: $layout-m) {
		padding-left: 0.75rem;
		padding-right: 0.75rem;
		margin-bottom: 1.5em;
	}

	// edge-to-edge grid (also max-width for crossbrowser support)
	@media (min-width: $layout-sm) {
		flex-basis: 33%;
		.no-flexbox & { max-width: 33%; }
	}
	@media (min-width: $layout-l) {
		flex-basis: 25%;
		.no-flexbox & { max-width: 25%; }
	}
	@media (min-width: $layout-xl) {
		flex-basis: 20%;
		.no-flexbox & { max-width: 20%; }
	}
	@media (min-width: $layout-xxl) {
		flex-basis: 14.28%;
		.no-flexbox & { max-width: 14.28%; }
	}
}

// Make a grid's items equal height
.Grid--full {
	align-items: stretch;
	.Grid-item {
		display: flex;
	}
}
.Grid--center {
	justify-content: center;
	text-align: center;
}

.Flex {
	display: flex;
	flex-flow: row wrap;
	
	// todo: refactor
	@media (min-width: $layout-s) {
		.BtnGroup:last-child {
			margin-left: 1rem;
		}
	}
}

// forces items to be
.Flex--single {
	@media (min-width: $layout-s) {
		flex-wrap: nowrap;
	}
}

.FlexRow {
	display: flex;
	align-items: baseline;
	justify-content: space-between;

	> .Btn {
		flex: 1;
	}
	> p {
		margin-left: 1rem;
		margin-right: 1rem;
		margin-bottom: 0;
		color: $gray;
	}
}
