16. jan 2015

{
  "rules": {

    // default rules are false if not specified
    // setting these to true would make ALL CHILD PATHS readable/writable

    "users": {
      // @todo other user should not be able to read other user- privacy
      // ".read": "true",
      ".read": "false",
      "$userID": {
        ".read": "$userID === auth.uid",
        // @todo other user should not be able to read other user- privacy
        ".write": "(!data.exists() && auth === null) || (!newData.exists() && auth === null) || $userID === auth.uid"
      }
    },

    "channels": {
      ".read": true,

      // this allows us to query by slug, not only ID
      ".indexOn": ["slug"],

      "$channelID": {
        //".write": "(auth.uid !== null && !data.exists() || !newData.exists()) || data.child('user').val() === auth.uid"
        ".write": "auth.uid !== null && data.child('user').val() === auth.uid || !data.exists()"
      }
    },

    "tracks": {
      ".read": true,
      ".write": "auth != null", // todo: remove this when the below works
      "$trackID": {
        // todo: here we need to allow write if track.channel.user === auth.uid
        // ".write": "!data.exists() || !newData.exists() || data.child('user').val() === auth.uid"
      }
    },

    "images": {
      ".read": true,
      ".write": "auth != null", // todo: remove this when the below works
      "$imageId": {
        // todo: here we need to allow write if image.channel.user === auth.uid
      }
    }
  }
}
